/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import org.example.values.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class WalrusTest {

    // 测试用例1：验证喂入两个不同的罐头食物后，海象都能吃到
    @Test
    public void testMultipleFoodFeeding() {
        Walrus walrus = new Walrus();
        FeedsWalrus feeder = new FeedsWalrus();

        // 第一个罐头食物
        WalrusFood foodAlpha = new WalrusFood();
        CannedWalrusFood cannedAlpha = new CannedWalrusFood(foodAlpha);
        feeder.feed(walrus, cannedAlpha);
        assertTrue("海象应当吃到第一个罐头中的食物", walrus.hasEaten(foodAlpha));

        // 第二个罐头食物
        WalrusFood foodBeta = new WalrusFood();
        CannedWalrusFood cannedBeta = new CannedWalrusFood(foodBeta);
        feeder.feed(walrus, cannedBeta);
        assertTrue("海象应当吃到第二个罐头中的食物", walrus.hasEaten(foodBeta));
    }

    // 测试用例2：确认传入罐头中的食物正是海象所吃的
    @Test
    public void testCorrectFoodAcquisition() {
        Walrus walrus = new Walrus();
        WalrusFood targetFood = new WalrusFood();
        CannedWalrusFood cannedFood = new CannedWalrusFood(targetFood);
        FeedsWalrus feeder = new FeedsWalrus();
        feeder.feed(walrus, cannedFood);
        assertTrue("海象应吃到传入罐头中的指定食物", walrus.hasEaten(targetFood));
    }

    // 测试用例3：打开罐头应返回食物，且重复打开返回 null
    @Test
    public void testCanOpening() {
        WalrusFood food = new WalrusFood();
        CannedWalrusFood cannedFood = new CannedWalrusFood(food);
        OpensCan opener = new OpensCan();
        WalrusFood retrievedFood = opener.open(cannedFood);
        assertNotNull("第一次打开罐头应获取到食物", retrievedFood);
        // 再次打开应返回 null，因为罐头内的食物已被取出
        assertNull("第二次打开罐头应为空", opener.open(cannedFood));
    }

    // 测试用例4：整体验证通过 FeedsWalrus 完成进食流程
    @Test
    public void testFeedingProcess() {
        Walrus walrus = new Walrus();
        WalrusFood meal = new WalrusFood();
        CannedWalrusFood cannedMeal = new CannedWalrusFood(meal);
        FeedsWalrus feeder = new FeedsWalrus();
        feeder.feed(walrus, cannedMeal);
        assertTrue("进食后海象应含有传入的食物", walrus.hasEaten(meal));
    }

    // 测试用例5：测试海象接受非标准食物（FakeFood 继承自 WalrusFood）
    public static class FakeFood extends WalrusFood {
        // 可以在此处扩展 FakeFood 的特殊逻辑（如果需要）
    }

    @Test
    public void testAcceptNonStandardFood() {
        Walrus walrus = new Walrus();
        FakeFood nonStandardFood = new FakeFood();
        // 直接调用海象的方法将食物加入胃中
        walrus.addToStomach(nonStandardFood);
        assertTrue("海象应接受非标准的 FakeFood 类型的食物", walrus.hasEaten(nonStandardFood));
    }
}
