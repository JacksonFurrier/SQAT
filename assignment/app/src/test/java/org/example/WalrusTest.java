/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.values.CannedWalrusFood;
import org.example.values.Walrus;
import org.example.values.WalrusFood;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.*;




public class WalrusTest {


    static Walrus walrus;
    FeedsWalrus feeder;
    OpensCan opener;

    @BeforeAll
    public static void init()
    {
        walrus = new Walrus();
    }

    @BeforeEach
    public void reset()
    {
        feeder = new FeedsWalrus();
        opener = new OpensCan();
    }




    //Write a test to see how much a Walrus can eat
    @ParameterizedTest
    @CsvSource ({"1","5","50","100","1000", "1000000"})
    public void testHowMuchCanAWalrusEat(int limit){

        for(int i = 1; i <= limit; i++){
            WalrusFood food = new WalrusFood();
            walrus.addToStomach(food);

            assertTrue(walrus.hasEaten(food), "The walrus failed to eat food number " + i);
        }
    }

    //Write a test to check if a Walrus gets the right food
    @Test
    public void testDoesWalrusEatTheRightFood(){
        WalrusFood expectedFood = new WalrusFood();
        WalrusFood nonExpectedFood = new WalrusFood();

        walrus.addToStomach(expectedFood);

        assertTrue(walrus.hasEaten(expectedFood));
        assertFalse(walrus.hasEaten(nonExpectedFood));

    }

    //Write a test to check opening a can will return food
    @Test
    public void testOpeningCanReturnsFood(){
        WalrusFood food = new WalrusFood();
        CannedWalrusFood canned = new CannedWalrusFood(food);


        WalrusFood extractedFood = opener.open(canned);
        assertNotNull(extractedFood);
        assertEquals(food, extractedFood);


        WalrusFood shouldBeNull = canned.extractContents();
        assertNull(shouldBeNull);
    }

    //Write a test to check on how a Walrus can eat
    @Test
    public void testDirectWalrusEating() {
        WalrusFood food = new WalrusFood();

        walrus.addToStomach(food);

        assertTrue(walrus.hasEaten(food));
    }


    @Test
    public void testFeederCannedFoodWalrusEating() {
        WalrusFood food = new WalrusFood();
        CannedWalrusFood can = new CannedWalrusFood(food);

        feeder.feed(walrus, can);

        assertTrue(walrus.hasEaten(food));
    }

    @Test
    public void testFeederEmptyCanEatingAttempt() {
        WalrusFood food = new WalrusFood();
        CannedWalrusFood can = new CannedWalrusFood(food);

        can.extractContents();

        feeder.feed(walrus,can);

        assertFalse(walrus.hasEaten(food));
    }

    //Write a test making a Walrus accept non-Walrus food
    private static class NonWalrusFood extends WalrusFood {

    }

    @Test public void testWalrusAcceptsNonStandardWalrusFood(){
        NonWalrusFood nonStandardFood = new NonWalrusFood();

        walrus.addToStomach(nonStandardFood);

        assertTrue(walrus.hasEaten(nonStandardFood));
    }




}
