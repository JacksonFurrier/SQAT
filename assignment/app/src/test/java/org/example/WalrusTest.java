/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.example.values.CannedWalrusFood;
import org.example.values.Walrus;
import org.example.values.WalrusFood;

public class WalrusTest {
    // @Test public void appHasAGreeting() {
    // }
    Walrus walrus;
    FeedsWalrus feedsWalrus;
    OpensCan opensCan;

    @Before
    public void init() {
        walrus = new Walrus();
        feedsWalrus = new FeedsWalrus();
        opensCan = new OpensCan();
    }

    @Test
    public void testWalrusMealLimit() {
        for (int i = 1; i <= 10000; i++) {
            WalrusFood food = new WalrusFood();
            walrus.addToStomach(food);
            assertTrue("The limit for a walrus to eat is " + (i-1) , walrus.hasEaten(food));
        }
    }

    @Test
    public void testWalrusReceivesCorrectFood() {
        WalrusFood food = new WalrusFood();
        walrus.addToStomach(food);
        assertTrue("Should receive and eat WalrusFood", walrus.hasEaten(food));
    }

    @Test
    public void testCanOpeningYieldsFood() {
        WalrusFood food = new WalrusFood();
        CannedWalrusFood cannedFood = new CannedWalrusFood(food);
        assertEquals("Should return original food from can", food, opensCan.open(cannedFood));
    }

    @Test
    public void testCanOpeningWithEmptyCan() {
        CannedWalrusFood emptyCan = new CannedWalrusFood(null);
        assertNull("Should return null for empty can", opensCan.open(emptyCan));
    }

    @Test
    public void testWalrusEatsDirectly() {
        WalrusFood food = new WalrusFood();
        walrus.addToStomach(food);
        assertTrue("Should eat food directly", walrus.hasEaten(food));
    }

    @Test
    public void testWalrusEatsFromCan() {
        WalrusFood food = new WalrusFood();
        CannedWalrusFood cannedFood = new CannedWalrusFood(food);
        walrus.addToStomach(opensCan.open(cannedFood));
        assertTrue("Should eat food from can", walrus.hasEaten(food));
    }

    @Test
    public void testWalrusEatsFromEmptyCan() {
        CannedWalrusFood emptyCan = new CannedWalrusFood(null);
        walrus.addToStomach(opensCan.open(emptyCan)); // 假设支持 null
        assertTrue("Should handle null food from empty can", walrus.hasEaten(null));
    }

    @Test
    public void testWalrusEatsViaFeeder() {
        WalrusFood food = new WalrusFood();
        CannedWalrusFood cannedFood = new CannedWalrusFood(food);
        feedsWalrus.feed(walrus, cannedFood);
        assertTrue("Should eat food via feeder", walrus.hasEaten(food));
    }

    @Test
    public void testWalrusAcceptsNonWalrusFood() {
        walrus.addToStomach(null); 
        assertTrue("Should accept null as non-Walrus food", walrus.hasEaten(null));
    }
    @Test
    public void testWalrusHandlesSpecialFood() {
        class Non_WalrusFood extends WalrusFood {}
        Non_WalrusFood otherFood = new Non_WalrusFood();
        walrus.addToStomach(otherFood);
        assertTrue(walrus.hasEaten(otherFood));
    }
}