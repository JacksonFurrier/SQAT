/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;
import org.example.values.Walrus;
import org.example.values.WalrusFood;
import org.example.values.CannedWalrusFood;
import org.example.OpensCan;
import org.example.FeedsWalrus;

public class WalrusTest {
    private FeedsWalrus feeder;

    @Before
    public void init() {
        feeder = new FeedsWalrus();
        // I didnt make a universal walrus because I prefer an empty walrus for each check.
    }

    // Task 1:
    // Walrus' stomach is a set which doesnt have a capacity, so the capacity would be our memory.
    @Test
    public void howMuchCanAWalrusEat() {
        Walrus w = new Walrus();

        WalrusFood food1 = new WalrusFood();
        WalrusFood food2 = new WalrusFood();
        WalrusFood food3 = new WalrusFood();
        WalrusFood food4 = new WalrusFood();
        WalrusFood food5 = new WalrusFood();

        w.addToStomach(food1);
        w.addToStomach(food2);
        w.addToStomach(food3);
        w.addToStomach(food4);
        w.addToStomach(food5);

        assertTrue("Walrus should eat food1", w.hasEaten(food1));
        assertTrue("Walrus should eat food2", w.hasEaten(food2));
        assertTrue("Walrus should eat food3", w.hasEaten(food3));
        assertTrue("Walrus should eat food4", w.hasEaten(food4));
        assertTrue("Walrus should eat food5", w.hasEaten(food5));
    }

    // Task 2:
    // The first task includes this too
    @Test
    public void walrusGetsTheRightFood() {
        Walrus w = new Walrus();
        WalrusFood food = new WalrusFood();
        CannedWalrusFood can = new CannedWalrusFood(food);

        feeder.feed(w, can);

        assertTrue("Walrus should eat food", w.hasEaten(food));
    }

    // Task 3:
    @Test
    public void openingACanWillReturnFood() {
        WalrusFood food = new WalrusFood();
        CannedWalrusFood can = new CannedWalrusFood(food);
        OpensCan opener = new OpensCan();

        WalrusFood extractedFood = opener.open(can);

        assertEquals("Returned food should be equal the food we've put in.", food, extractedFood);
        assertNull("Can should return null after already extracting food.", can.extractContents());
    }

    // Task 4:
    // With a feeder and a can with food in it.
    @Test
    public void howAWalrusCanEat() {
        Walrus w = new Walrus();
        WalrusFood food = new WalrusFood();
        CannedWalrusFood can = new CannedWalrusFood(food);

        feeder.feed(w, can);

        assertTrue("Walrus' stomach should contain the food", w.hasEaten(food));
    }

    // Task 5:
    // Because of the type system of java, walrus addToStomach function only accepts WalrusFood type objects.
    // The only way I see it possible to accept "non-Walrus" food is to force it to eat a null object with the same type
    // Other solution would be to make a subclass that inherits from the WalrusFood, but
    // that would still be a walrus food, in my opinion.
    // A realistic way of making a walrus eat null is to eat from a can that has been emptied before.
    @Test
    public void walrusAcceptNonWalrusFood() {
        Walrus w = new Walrus();
        WalrusFood food = new WalrusFood();
        CannedWalrusFood can = new CannedWalrusFood(food);

        feeder.feed(w, can);

        assertNull("Can returns null after feeder fed the walrus.", can.extractContents());

        feeder.feed(w, can);

        assertTrue("Walrus should have null in stomach.", w.hasEaten(null));
    }

    // Just to make sure, I wrote a test for the subclass option too.
    @Test
    public void walrusEatsSubclassWalrusFood() {
        class SubWalrusFood extends WalrusFood {}
        Walrus w = new Walrus();
        SubWalrusFood subWalrusFood = new SubWalrusFood();
        CannedWalrusFood can = new CannedWalrusFood(subWalrusFood);

        feeder.feed(w, can);

        assertTrue("Walrus' stomach contains SubWalrusFood food", w.hasEaten(subWalrusFood));
    }

    /*
    // Just checking
    @Test
    public void failTest() {
        assertTrue(false);
    }*/
}
